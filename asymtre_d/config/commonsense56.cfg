# ps1: calculate the box's relative orientation to the pusher robot
# ps2: calculate the pushing direction based on the beacon (red flag)
# ps3: check whether robots are still in contact with the box
# ps4: switch between motor schemas
# ps5: calculate the closest point of the box using sonar
# ms1: push the box 
# ms2: align with the box
# ms4: move along the box and align, but it has time penalty

atomic {
  ps1 & laser = 90
  ps2 & camera = 99
  ps3 & laser = 99
  ps4 & dummy = 100
#  ps5 & sonar = 90

  ps13 & laser = 90
#  ps13 & sonar = 80
  
  cs & comm = 100
  ms1 & dummy = 100
  ms2 & dummy = 100
  ms4 & timecost = 80

  ms14 & dummy = 100
}
  
cost {
  comm = 0,
  camera = 2,
  sonar = 3,
  laser = 4,
  dummy = 1,
  timecost = 20,
}
